#!/bin/sh
#                                                                                                         
#* doxel-viewer-thumbs
#*
#* Copyright (c) 2015-2017 ALSENET SA - http://doxel.org
#* Please read <http://doxel.org/license> for more information.
#*
#* Author(s):
#*
#*      Luc Deschenaux <rurik.bugdanov@alsenet.com>
#*      Rurik Bogdanov <luc.deschenaux@freesurf.ch>
#*
#* This file is part of the DOXEL project <http://doxel.org>.
#*
#* This program is free software: you can redistribute it and/or modify
#* it under the terms of the GNU Affero General Public License as published by
#* the Free Software Foundation, either version 3 of the License, or
#* (at your option) any later version.
#*
#* This program is distributed in the hope that it will be useful,
#* but WITHOUT ANY WARRANTY; without even the implied warranty of
#* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#* GNU Affero General Public License for more details.
#*
#* You should have received a copy of the GNU Affero General Public License
#* along with this program.  If not, see <http://www.gnu.org/licenses/>.
#*
#* Additional Terms:
#*
#*      You are required to preserve legal notices and author attributions in
#*      that material or in the Appropriate Legal Notices displayed by works
#*      containing it.
#*
#*      You are required to attribute the work as explained in the "Usage and
#*      Attribution" section of <http://doxel.org/license>.
#
 

set -v
set -e

for f in parallel mogrify exiftool ; do
	if ! [ -f "$(which $f)" ] ; then
		echo "ERROR: command '$f' not found"
		exit 1
	fi
done

EXT=${EXT:-jpeg}
[ -d "original_panos" ] && EXT=jpg

echo === create thumbnails in $(pwd)/thumbs
mkdir -p thumbs
find original_images/ -type f -name \*.$EXT | parallel --gnu -j1 mogrify  -path thumbs -format jpg -define jpeg:size=384x384 -auto-orient -thumbnail 192x192 -unsharp 0x.5 -strip {} \|\| true

echo === insert thumbnails in exif
for f in original_images/*$EXT ; do
  THUMB=thumbs/$(basename $f $EXT)jpg
  [ -f $THUMB ] || continue
  exiftool '-ThumbnailImage<='$THUMB $f || {
    echo === repair exif and retry
    exiftool -all= -tagsfromfile @ -all:all -unsafe -icc_profile $f \
      && exiftool '-ThumbnailImage<='$THUMB $f || true
  }
done
rm original_images/*original thumbs -r
[ -f viewer/viewer.json ] || exit
cd original_images
echo === generate jpeg_metadata.bin and index
jpeg_metadata $(poses $(pwd)/../viewer/viewer.json)
echo === copy files 
mv jpeg_metadata* ../viewer
